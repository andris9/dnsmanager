<?php

define("BOT_USERAGENT","MyBot/0.1");

function dns_permission() {
    return array(
        'administer dns' => array(
            'title' => t('Administer DNS Manager'),
            'description' => t('Perform administration tasks for DNS module.'),
        ),
        'access dns' => array(
            'title' => t('Access DNS contents'),
            'description' => t('Use DNS Manager module.'),
        )
    );
}

function dns_menu() {
    $items = array();

    $items['admin/config/content/dns'] = array(
        'title' => 'DNS Manager',
        'description' => 'Configuration for DNS Manager module',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('dns_config_form'),
        'access arguments' => array('administer dns'),
        'type' => MENU_NORMAL_ITEM,
    );

    $items['dns'] = array(
        'title' => t('DNS Manager'),
        'description' => 'Manage DNS records',
        'page callback' => 'dns_domain_list',
        'access arguments' => array('access dns'),
        'type' => MENU_NORMAL_ITEM,
        'menu_name' => 'navigation'
    );

    $items['dns/list'] = array(
        'title' => t('List'),
        'page callback' => 'dns_domain_list',
        'type' => MENU_DEFAULT_LOCAL_TASK,
        'access arguments' => array('access dns'),
        'parent' => 'dns',
        'weight'=>-10,
        'menu_name' => 'navigation'
    );

    $items['dns/add'] = array(
        'title' => t('Add'),
        'page callback' => 'drupal_get_form',
        'page arguments' => array('dns_domain_add_form'),
        'type' => MENU_LOCAL_TASK,
        'access arguments' => array('access dns'),
        'parent' => 'dns',
        'menu_name' => 'navigation'
    );

    $items['dns/delete'] = array(
        'page callback' => 'dns_domain_delete',
        'access arguments' => array('access dns'),
        'type' => MENU_CALLBACK,
        'parent' => 'dns',
        'menu_name' => 'navigation'
    );

    $items['dns/edit'] = array(
        'title' => t('Edit domain'),
        'page callback' => 'dns_domain_edit',
        'access arguments' => array('access dns'),
        'type' => MENU_CALLBACK,
        'parent' => 'dns',
        'menu_name' => 'navigation'
    );

    $items['dns/remove-record'] = array(
        'page callback' => 'dns_record_remove',
        'access arguments' => array('access dns'),
        'type' => MENU_CALLBACK,
        'parent' => 'dns',
        'menu_name' => 'navigation'
    );

    return $items;
}

function dns_domain_list(){
    global $user;

    $header = array(array("data"=>"#","width"=>"30"), t("Zone name"),array("data"=>"&nbsp;","width"=>"50"));
    $rows = array();

    $domains = load_domains();

    if($domains){
        for($i=0;$i<count($domains);$i++){
            $rows[] = array(
                $i+1,
                '<strong>'.l($domains[$i]["_id"],"dns/edit",array("query"=>array("domain"=>$domains[$i]["_id"]))).'</strong>',
                array(
                    "data"=>l(t("Delete"),"dns/delete",array("query"=>array("domain"=>$domains[$i]["_id"]))),
                    "style"=>"text-align: center",
                    "onclick"=>"return confirm('Are you sure?')"
                )
            );
        }
    }

    return theme_table(array(
        "header"=>$header,
        "rows"=>$rows,
        "attributes"=>array(),
        "caption"=>"Domain list for <strong>".htmlspecialchars($user->name)."</strong>",
        "colgroups"=>array(),
        "sticky"=>true,
        "empty"=>t("No domains added, click ".l("here","dns/add")." to add one")
    ));
}

function dns_domain_delete(){
    global $user;
    $domain = trim($_GET["domain"]);
    if(!$domain){
        drupal_set_message(t("Invalid request"), 'error');
        drupal_goto("dns");
    }

    if($data = load_from_url(variable_get('dns_api_access_point', "http://node.ee/api/dns")."/remove?user=".urlencode($user->name)."&domain=".urlencode($domain))){
        $response = @json_decode($data, true);
        if($response["status"]!="OK" || !$response["data"]){
            form_set_error('dns_domain_name', t('Can\'t delete this domain - domain already removed or not listed'));
        }else{
        	drupal_set_message(t("Domain removed"));
        }
    }else{
        form_set_error('dns_domain_name', t('Failed to check domain name'));
    }

    drupal_goto("dns");
}

function dns_domain_edit(){
    drupal_set_title("DNS Manager");
    $domain = trim($_GET["domain"]);
    $time_start = microtime(true);
    $data = load_domain_info($domain);
    $time_end = microtime(true);
    $time = $time_end - $time_start;

    $types = array("A"=>"IP address", "CNAME"=>"Domain alias", "MX"=>"Mail server", "NS"=>"Name server");

    $header = array(array("data"=>"#","width"=>"30"), t("Name"), t("TTL"), t("Value"), array("data"=>"&nbsp;","width"=>"50"));
    $rows = array();

    $tables = array(
        "A"=>"",
        "CNAME"=>"",
        "MX"=>"",
        "NS"=>""
    );
    if($data){
        $i=0;
        foreach($data as $type => $block){
            if(count($block)){

                $rows = array();
                if(is_array($block)){
                	foreach($block as $row){
                        $rows[] = array(
                            ++$i,
                            htmlspecialchars($row["name"]),
                            intval($row["ttl"]),
                            ($type=="MX"?intval($row["value"][1])." ":"").htmlspecialchars($row["value"][0]),
                            array(
                                "data"=>l("Delete", "dns/remove-record",array(
                                    "query"=>array(
                                        "row"=>intval($row["id"]),
                                        "domain"=>htmlspecialchars($domain)
                                    )
                                )),
                                "style"=>"text-align: center",
                                "onclick"=>"return confirm('Are you sure?')"
                            )

                        );
                    }


                    if($i){
                    	$tables[$type] = theme_table(array(
                            "header"=>$header,
                            "rows"=>$rows,
                            "attributes"=>array(),
                            "caption"=>"<strong>{$types["$type"]} ($type)</strong> records for <strong>".htmlspecialchars($domain)."</strong>",
                            "colgroups"=>array(),
                            "empty"=>t("No records added")
                        ));
                    }
                }
            }
    	}
    }

    $table = join("\n", $tables);

    $records_field = theme_fieldset(array(
        "element"=> array(
            "#title"=>"DNS records for <strong>".htmlspecialchars($domain)."</strong>",
            "#description"=>"<p>Here are listed all the DNS records of <strong>".htmlspecialchars($domain)."</strong>. To use the DNS service, set the nameservers for your domain to:</p><ul><li><strong>ns11.node.ee</strong></li><li><strong>ns22.node.ee</strong></li></ul>",
            "#children"=>$table
        )
    ));

    $add_form = drupal_render(drupal_get_form("dns_record_add_form"));

    return $records_field.$add_form;
}

function dns_record_add_form($form, &$form_state){
    $domain = trim($_GET["domain"]);

    $form['general'] = array(
        '#type' => 'fieldset',
        '#title' => t('Add new record'),
        "#description"=>t(sprintf("Add a new DNS record for %s",htmlspecialchars($domain))),
        "#collapsible"=>TRUE,
        "#collapsed"=>!form_get_errors()?TRUE:FALSE
    );

    $form['general']['name'] = array(
        '#type' => 'textfield',
        '#title' => t('Name'),
        '#size' => 80,
        '#description' => t('Subdomain, for example <strong>www</strong>, unicode characters are allowed. Use <strong>@</strong> for '.htmlspecialchars($domain).'<br/>Regular expressions and <em>wildcards</em> are allowed. Enclose regular expressions in slashes (<code>/regexp+/</code>).'),
        '#required' => TRUE
    );

    $form['general']['type'] = array(
        '#type' => 'select',
        '#title' => t('Type'),
        '#options' => array("A"=>"IP address", "CNAME"=>"Domain alias", "MX"=>"Mail server", "NS"=>"Name server"),
        '#default_value'=>"A",
        '#description' => t('Select record type'),
        '#required' => TRUE
    );

    $form['general']['ttl'] = array(
        '#type' => 'textfield',
        '#title' => t('TTL'),
        '#size' => 10,
        '#default_value'=>"600",
        '#description' => t('<em><b>T</b>ime <b>T</b>o <b>L</b>ive</em> value, min. 1'),
        '#required' => FALSE
    );

    $form['general']['priority'] = array(
        '#type' => 'textfield',
        '#title' => t('Priority (Mail server only)'),
        '#size' => 10,
        '#description' => t('Mail server priority'),
        '#required' => FALSE
    );

    $form['general']['value'] = array(
        '#type' => 'textfield',
        '#title' => t('Value'),
        '#size' => 80,
        '#description' => t('Value, for example <strong>127.0.0.1</strong> for an IP address.'),
        '#required' => TRUE
    );

    $form['general']['information'] = array(
        '#markup'=> '<p><b>Wildcard support</b><br/>When using <em>wildcards</em> or regular expressions in the <em>name</em> field, substitutions for <em>value</em> can be used. '.
                    'When using <em>wildcards</em>, <code>$1</code> indicates the whole match, <code>$2</code> first wildcard, <code>$3</code> second wildcard etc. '.
                    'When using regular expressions, <code>$1</code> indicates the first capture group, <code>$2</code> second capture group etc.</p>'.
                    '<p><b>For example</b><br/><em>Name:</em> <code>users.*</code>, <em>Value:</em> <code>$2.example.com</code> converts <code>users.<em>test</em>.'.htmlspecialchars($domain).'</code> to <code><em>test</em>.example.com</code>.<br/>'.
                    '<em>Name:</em> <code>/^r/</code>, <em>Value:</em> <code>example.com</code> converts all subdomains beginning with <code>r</code> to <code>example.com</code>.</p>'
    );

    $form['general']['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Add record'),
    );

    return $form;
}

function dns_record_add_form_validate($form, &$form_state) {
    global $user;

    $domain = trim($_GET["domain"]);
    $errors = false;

    if(!trim($form_state['values']['name'])){
        form_set_error('name', t('Name is required!'));
        $errors = true;
    }

    if(!in_array($form_state['values']['type'], array("A", "CNAME", "NS", "MX"))){
        form_set_error('type', t('Type is required!'));
        $errors = true;
    }

    mb_regex_encoding('UTF-8');
    
    $name = trim($form_state['values']['name']);
    if(substr($name,0,1)!="/" || substr($name,-1)!="/"){
        if(mb_ereg_match(".*[^[:alnum:]\.\-\*]", $name)){
            form_set_error('name', t('Name includes illegal characters!'));
            $errors = true;
        }	
    }
    
    $value = trim($form_state['values']['value']);
    if(mb_ereg_match('.*[^[:alnum:]\.\-\*\$]', $value)){
        form_set_error('value', t('Value includes illegal characters!'));
        $errors = true;
    }
    
    $type = strtoupper(trim($form_state['values']['type'])); 
    if($type=="A"){
    	if(!preg_match('/^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/', $value)){
    		form_set_error('value', t('Value must be IP formatted (xxx.xxx.xxx.xxx)'));
            $errors = true;
    	}
    }
    
    $ttl = abs(intval(trim($form_state['values']['type'])));

    $record = array(
        "name"=> $name,
        "type"=> $type,
        "ttl"=> $ttl?$ttl:60,
        "value"=> array($value)
    );

    if($record["type"]=="MX"){
        $record["value"][] = abs(intval(trim($form_state['values']['priority'])));
    }

    if(!$errors){
        if($data = load_from_url(variable_get('dns_api_access_point', "http://node.ee/api/dns")."/update?user=".urlencode($user->name)."&domain=".urlencode($domain),json_encode($record))){
            $response = @json_decode($data, true);
            if($response["status"]!="OK" || !$response["data"]){
                form_set_error(null, t('Error saving data'));
            }
    
        }else{
            form_set_error(null, t('Error connecting to server'));
        }
    }

}

function dns_record_add_form_submit($form, &$form_state) {
    drupal_set_message(t("Record added"));
    drupal_goto('dns/edit', array("query"=>array("domain"=>$_GET["domain"])));
}

function dns_record_remove(){
    global $user;
    $domain = trim($_GET["domain"]);
    $record = intval($_GET["row"]);

    if(!$record || !$domain){
        drupal_set_message(t("Invalid request"), 'error');
    	if(!$domain){
            drupal_goto("dns");
        }else{
        	drupal_goto("dns/edit", array("query"=>array("domain"=>$domain)));
        }
    }

    if($data = load_from_url(variable_get('dns_api_access_point', "http://node.ee/api/dns")."/remove-record?user=".urlencode($user->name)."&domain=".urlencode($domain)."&rid=".urlencode($record))){
        $response = @json_decode($data, true);
        if($response["status"]!="OK" || !$response["data"]){
            drupal_set_message(t("Error saving data"), 'error');
            drupal_goto("dns/edit", array("query"=>array("domain"=>$domain)));
        }

    }else{
        drupal_set_message(t("Error connecting to server"), 'error');
        drupal_goto("dns/edit", array("query"=>array("domain"=>$domain)));
    }

    drupal_set_message(t("Record removed"));
    drupal_goto("dns/edit", array("query"=>array("domain"=>$domain)));
}

function dns_domain_add_form($form, &$form_state){
    $form['dns_domain_name'] = array(
        '#type' => 'textfield',
        '#title' => t('Zone name'),
        '#size' => 80,
        '#description' => t('The name of the zone (domain), unicode characters are allowed'),
        '#required' => TRUE
    );

    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Add zone'),
    );

    return $form;
}

function dns_domain_add_form_validate($form, &$form_state) {
    global $user;

    $errors = false;
    $domain = mb_strtolower(trim($form_state['values']['dns_domain_name']));

    if(!$domain){
        form_set_error('dns_domain_name', t('Required field!'));
        $errors = true;
    }
    
    mb_regex_encoding('UTF-8');
    if(mb_ereg_match(".*[^[:alnum:]\.\-]", $domain)){
    	form_set_error('dns_domain_name', t('Domain name includes illegal characters!'));
        $errors = true;
    }
    
    if(!$errors){
        if($data = load_from_url(variable_get('dns_api_access_point', "http://node.ee/api/dns")."/add?user=".urlencode($user->name)."&domain=".urlencode($domain))){
            $response = @json_decode($data, true);
            if($response["status"]!="OK" || !$response["data"]){
                form_set_error('dns_domain_name', t('This domain name is already listed on the system'));
            }
        }else{
        	form_set_error('dns_domain_name', t('Failed to check domain name'));
        }
    }

}

function dns_domain_add_form_submit($form, &$form_state) {
    drupal_set_message(t("Domain added"));
    $form_state['redirect'] = 'dns/list';
}


function dns_config_form($form, &$form_state){
    $form['dns_api_access_point'] = array(
        '#type' => 'textfield',
        '#title' => t('DNS API Access point'),
        '#default_value' => variable_get('dns_api_access_point', "http://node.ee/api/dns"),
        '#size' => 80,
        '#description' => t('The API access point URL'),
        '#required' => TRUE,
    );
    return system_settings_form($form);
}

function dns_config_form_validate($form, &$form_state){
    $dns_api = $form_state['values']['dns_api_access_point'];
    if (!trim($dns_api)){
        form_set_error('dns_api_access_point', t('Required field'));
    }
}

function load_domain_info($domain){
    global $user;

    if($data = load_from_url(variable_get('dns_api_access_point', "http://node.ee/api/dns")."/records?user=".urlencode($user->name)."&domain=".urlencode($domain))){
        $response = @json_decode($data, true);
        if($response["status"]=="OK" && isset($response["data"])){
            return (array)$response["data"];
        }
    }

    return false;
}

function load_domains(){
    global $user;

    if($data = load_from_url(variable_get('dns_api_access_point', "http://node.ee/api/dns")."/list?user=".urlencode($user->name))){
        $response = @json_decode($data, true);
        if($response["status"]=="OK" && $response["data"]){
            return $response["data"];
        }
    }

    return false;
}

function load_from_url($url, $postBody = false){
    $ch = curl_init();
    $options = array(CURLOPT_URL        => $url,
                CURLOPT_USERAGENT       => BOT_USERAGENT,
                CURLOPT_FOLLOWLOCATION  => true,
                CURLOPT_AUTOREFERER     => true,
                CURLOPT_NOBODY          => false,
                CURLOPT_RETURNTRANSFER  => true,
                CURLOPT_SSL_VERIFYPEER  => false,
                CURLOPT_HEADER          => false,
                CURLOPT_CONNECTTIMEOUT  => 10
                );
    if($postBody){
    	$options[CURLOPT_POST] = true;
        $options[CURLOPT_POSTFIELDS] = $postBody;
    }

    curl_setopt_array($ch, $options);
    $content = curl_exec($ch);
    $err     = curl_errno($ch);
    $errmsg  = curl_error($ch);
    $header  = curl_getinfo($ch);
    $status  = curl_getinfo($ch, CURLINFO_HTTP_CODE);
    curl_close($ch);

    //echo "<pre>";
    //print_r(array($err, $content, $errmsg, $header, $status));

    if($err || substr($status,0,1) != "2"){
        return false;
    }

    return $content;
}